package com.app.boxee.shopper.view_models;

import android.app.Activity;
import android.arch.lifecycle.LiveData;
import android.arch.lifecycle.MutableLiveData;
import android.arch.lifecycle.ViewModel;
import android.support.v4.app.Fragment;
import android.widget.Toast;

import com.app.boxee.shopper.dailog.LoaderDialog;
import com.app.boxee.shopper.data.AppLocationsOption;
import com.app.boxee.shopper.data.ConsignmentFirebaseData;
import com.app.boxee.shopper.data.Env;
import com.app.boxee.shopper.data.SelectModel;
import com.app.boxee.shopper.data.request.OrderDetailsByStatusRequest;
import com.app.boxee.shopper.data.request.TrackRequest;
import com.app.boxee.shopper.data.response.GetShipmentByIdResponse;
import com.app.boxee.shopper.data.response.OrderDetailsByStatusRespose;
import com.app.boxee.shopper.data.response.TrackResponseData;
import com.app.boxee.shopper.database.dao.ShopperDao;
import com.app.boxee.shopper.database.entity.MetadataData;
import com.app.boxee.shopper.repositories.ShopperRepository;
import com.app.boxee.shopper.services.FirebaseMessagingService;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

public class OrderByStatusViewModel extends ViewModel {

    private final ShopperRepository userRepo;
    private final ShopperDao shopperDao;
    private List<OrderDetailsByStatusRespose> responseList;
    private MutableLiveData<List<OrderDetailsByStatusRespose>> data = new MutableLiveData<>();

    @Inject
    public OrderByStatusViewModel(ShopperRepository userRepo, ShopperDao shopperDao) {
        this.userRepo = userRepo;
        this.shopperDao = shopperDao;

    }

    public void init(SelectModel selectModel,Env env,Activity activity, Fragment fragment) {
        List<AppLocationsOption> outgoing = env.getAppHomeOptionsOutgoing();
        List<AppLocationsOption> incoming = env.getAppHomeOptionsIncoming();
        OrderDetailsByStatusRequest request = new OrderDetailsByStatusRequest();
        if(selectModel.getStatus().equalsIgnoreCase(incoming.get(0).getName())){
            //inpreparationbywebsop
            request.setMode("incoming");
            request.setStatus("booked");

        }
        else if(selectModel.getStatus().equalsIgnoreCase(incoming.get(1).getName())){
            //in progress with clex
            request.setMode("incoming");
            request.setStatus("intransit");
        }
        else if(selectModel.getStatus().equalsIgnoreCase(incoming.get(2).getName())){
            //ariving today
            request.setMode("incoming");
            request.setStatus("arriving");
        }
        else if(selectModel.getStatus().equalsIgnoreCase(incoming.get(3).getName())){
            //history
            request.setMode("incoming");
            request.setStatus("delivery");
        }
        else if(selectModel.getStatus().equalsIgnoreCase(incoming.get(4).getName())){
            //on hold with clex
            request.setMode("incoming");
            request.setStatus("onhold");
        }
        else if(selectModel.getStatus().equalsIgnoreCase(incoming.get(5).getName())){
            request.setMode("incoming");
            request.setStatus("return_to_shipper");
        }else  if(selectModel.getStatus().equalsIgnoreCase(outgoing.get(0).getName())){
            //Awbs generated by webshop for return
            request.setMode("outgoing");
            request.setStatus("booked");
        }
        else if(selectModel.getStatus().equalsIgnoreCase(outgoing.get(1).getName())){
            //schedule my pickup
            request.setMode("outgoing");
            request.setStatus("booked");
        }
        else if(selectModel.getStatus().equalsIgnoreCase(outgoing.get(2).getName())){
            //picking up today
            request.setMode("outgoing");
            request.setStatus("arriving");
        }
        else if(selectModel.getStatus().equalsIgnoreCase(outgoing.get(3).getName())){
            //picked up by clex
            request.setMode("outgoing");
            request.setStatus("intransit");
        }
        else {
            //return history
            request.setMode("outgoing");
            request.setStatus("delivery");
        }
        request.setDeviceId(FirebaseMessagingService.getToken(fragment.getActivity()));
//        if (this.responseList != null) {
//            return;
//        }
        LoaderDialog.showLoader(fragment);

        userRepo.getOrderDetailsByStatus(request, activity, response -> {
            LoaderDialog.hideLoader(fragment);
            if (response.body().getCode() == 200) {
                responseList = response.body().getData().getConsignments();
                data.setValue(responseList);

            }else {
                Toast.makeText(activity,response.body().getMessage(),Toast.LENGTH_SHORT).show();
            }

        });
    }

    public MutableLiveData<List<OrderDetailsByStatusRespose>> getData() {
        return data;
    }


//    public void apiCall(Activity activity, Fragment fragment, TrackRequest request) {
//        if (this.responseList != null) {
//            return;
//        }
//        LoaderDialog.showLoader(fragment);
//
//        userRepo.getShipmentDetails(request, activity, response -> {
//            LoaderDialog.hideLoader(fragment);
//            if (response.body().getCode() == 200) {
//                responseList = (ArrayList<TrackResponseData>) response.body().getData();
//                setDataListItems();
//            }
//
//        });

//    }


//    void start(int counter) {
//        if (counter < consignments.length)
//            checkFirbase(consignments[counter], counter);
//        else {
//            if (counter == consignments.length) {
//                trackingList.setValue(cns);
//            }
//        }
//    }

//    public MutableLiveData<List<ConsignmentFirebaseData>> getTrackingList() {
//        return this.trackingList;
//    }

//    private void checkFirbase(String s, int i) {
//        LoaderDialog.showLoader(context);
//        FirebaseUtil.checkData(s, this.context, resp -> {
//            LoaderDialog.hideLoader(context);
//            if (resp instanceof ConsignmentFirebaseData) {
//                ConsignmentFirebaseData consignmentFirebaseData = (ConsignmentFirebaseData) resp;
//                consignmentFirebaseData.setFound(true);
//                cns.add(consignmentFirebaseData);
//                FirebaseUtil.checkWebShop(consignmentFirebaseData.getFk_webshop() + "", this.context, resp1 -> {
//                    FirebaseUtil.checkStatus(consignmentFirebaseData.getFk_status() + "", this.context, resp2 -> {
//                        start(i + 1);
//                        Status status = (Status) resp2;
//                        consignmentFirebaseData.setFk_status_name(status.getDescription());
//                    });
//                    WebShop webShop = (WebShop) resp1;
//                    consignmentFirebaseData.setFk_webshop_name(webShop.getWebshop_name());
//                });
//
//            } else {
//                ConsignmentFirebaseData consignmentFirebaseData = new ConsignmentFirebaseData();
//                consignmentFirebaseData.setConsignment_id(Long.parseLong(s));
//                consignmentFirebaseData.setFound(false);
//                cns.add(consignmentFirebaseData);
//                start(i + 1);
//            }
//
//
//        });
//    }
}
